package netcheckers;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;
import javax.swing.JColorChooser;

public class Configframe extends javax.swing.JFrame {

    private static Configframe instance;
    private Color colorBoardBlack = new Color(-7183360);
    private Color colorBoardWhite = new Color(-2710016);
    private Color colorCheckersBlack = new Color(0);
    private Color colorChekersWhite = new Color(255, 255, 255);
    
    private Configframe() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        this.setLocation((screenSize.width - frameSize.width) / 2,(screenSize.height - frameSize.height) / 2);
        this.setSize(230, 240);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanelBoardBlack = new javax.swing.JPanel();
        jPanelBoardWhite = new javax.swing.JPanel();
        jPanelCheckersBlack = new javax.swing.JPanel();
        jPanelCheckersWhite = new javax.swing.JPanel();
        jButtonResetColors = new javax.swing.JButton();

        setTitle("Colors");
        getContentPane().setLayout(null);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSave);
        jButtonSave.setBounds(10, 170, 90, 23);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancel);
        jButtonCancel.setBounds(117, 170, 90, 23);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Board color"));
        jPanel2.setLayout(null);

        jLabel4.setText("Board color black");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(20, 20, 130, 14);

        jLabel5.setText("Board color white");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(20, 40, 130, 14);

        jLabel6.setText("Checkers color black");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(20, 60, 130, 14);

        jLabel7.setText("Checkers color white");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(20, 80, 130, 14);

        jPanelBoardBlack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBoardBlack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelBoardBlackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoardBlackLayout = new javax.swing.GroupLayout(jPanelBoardBlack);
        jPanelBoardBlack.setLayout(jPanelBoardBlackLayout);
        jPanelBoardBlackLayout.setHorizontalGroup(
            jPanelBoardBlackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanelBoardBlackLayout.setVerticalGroup(
            jPanelBoardBlackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        jPanel2.add(jPanelBoardBlack);
        jPanelBoardBlack.setBounds(160, 20, 18, 18);

        jPanelBoardWhite.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBoardWhite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelBoardWhiteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBoardWhiteLayout = new javax.swing.GroupLayout(jPanelBoardWhite);
        jPanelBoardWhite.setLayout(jPanelBoardWhiteLayout);
        jPanelBoardWhiteLayout.setHorizontalGroup(
            jPanelBoardWhiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanelBoardWhiteLayout.setVerticalGroup(
            jPanelBoardWhiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        jPanel2.add(jPanelBoardWhite);
        jPanelBoardWhite.setBounds(160, 40, 18, 18);

        jPanelCheckersBlack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelCheckersBlack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelCheckersBlackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelCheckersBlackLayout = new javax.swing.GroupLayout(jPanelCheckersBlack);
        jPanelCheckersBlack.setLayout(jPanelCheckersBlackLayout);
        jPanelCheckersBlackLayout.setHorizontalGroup(
            jPanelCheckersBlackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanelCheckersBlackLayout.setVerticalGroup(
            jPanelCheckersBlackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        jPanel2.add(jPanelCheckersBlack);
        jPanelCheckersBlack.setBounds(160, 60, 18, 18);

        jPanelCheckersWhite.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelCheckersWhite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelCheckersWhiteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelCheckersWhiteLayout = new javax.swing.GroupLayout(jPanelCheckersWhite);
        jPanelCheckersWhite.setLayout(jPanelCheckersWhiteLayout);
        jPanelCheckersWhiteLayout.setHorizontalGroup(
            jPanelCheckersWhiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );
        jPanelCheckersWhiteLayout.setVerticalGroup(
            jPanelCheckersWhiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        jPanel2.add(jPanelCheckersWhite);
        jPanelCheckersWhite.setBounds(160, 80, 18, 18);

        jButtonResetColors.setText("reset");
        jButtonResetColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetColorsActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonResetColors);
        jButtonResetColors.setBounds(18, 117, 170, 23);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 10, 200, 150);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanelBoardBlackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelBoardBlackMouseClicked
        colorBoardBlack = JColorChooser.showDialog(this, "Select color for board black", colorBoardBlack);
        jPanelBoardBlack.setBackground(colorBoardBlack);
        NetCheckers.getInstance().checkersBoardPanel.repaint();
    }//GEN-LAST:event_jPanelBoardBlackMouseClicked

    private void jPanelBoardWhiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelBoardWhiteMouseClicked
        colorBoardWhite = JColorChooser.showDialog(this, "Select color for board white", colorBoardWhite);
        jPanelBoardWhite.setBackground(colorBoardWhite);
        NetCheckers.getInstance().setBackgroundColor(colorBoardWhite);
        NetCheckers.getInstance().checkersBoardPanel.repaint();
    }//GEN-LAST:event_jPanelBoardWhiteMouseClicked

    private void jPanelCheckersBlackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelCheckersBlackMouseClicked
        colorCheckersBlack = JColorChooser.showDialog(this, "Select color for checkers black", colorCheckersBlack);
        jPanelCheckersBlack.setBackground(colorCheckersBlack);
        NetCheckers.getInstance().checkersBoardPanel.repaint();
    }//GEN-LAST:event_jPanelCheckersBlackMouseClicked

    private void jPanelCheckersWhiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelCheckersWhiteMouseClicked
        colorChekersWhite = JColorChooser.showDialog(this, "Select color for checkers white", colorChekersWhite);
        jPanelCheckersWhite.setBackground(colorChekersWhite);
        NetCheckers.getInstance().checkersBoardPanel.repaint();
    }//GEN-LAST:event_jPanelCheckersWhiteMouseClicked

    private void jButtonResetColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetColorsActionPerformed
        colorBoardBlack = new Color(146, 100, 0);
        colorBoardWhite = new Color(214, 166, 0);
        colorCheckersBlack = new Color(0);
        colorChekersWhite = new Color(255, 255, 255);
        jPanelBoardBlack.setBackground(colorBoardBlack);
        jPanelBoardWhite.setBackground(colorBoardWhite);
        jPanelCheckersBlack.setBackground(colorCheckersBlack);
        jPanelCheckersWhite.setBackground(colorChekersWhite);
        NetCheckers.getInstance().setBackgroundColor(colorBoardWhite);
        NetCheckers.getInstance().checkersBoardPanel.repaint();
    }//GEN-LAST:event_jButtonResetColorsActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        saveConfig();
        setVisible(false);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        loadConfig();
        setVisible(false);
        NetCheckers.getInstance().checkersBoardPanel.repaint();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonResetColors;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelBoardBlack;
    private javax.swing.JPanel jPanelBoardWhite;
    private javax.swing.JPanel jPanelCheckersBlack;
    private javax.swing.JPanel jPanelCheckersWhite;
    // End of variables declaration//GEN-END:variables

    public Color getColorBoardBlack() {
        return colorBoardBlack;
    }

    public Color getColorCheckersBlack() {
        return colorCheckersBlack;
    }

    public Color getColorBoardWhite() {
        return colorBoardWhite;
    }

    public Color getColorChekersWhite() {
        return colorChekersWhite;
    }

    public static Configframe getInstance() {
        if (instance == null) {
            instance = new Configframe();
        }
        return instance;
    }

    public void loadConfig() {
        try {
            InputStream propin = new FileInputStream(new File("settings"));
            Properties prop = new Properties();
            prop.load(propin);
            if (prop.getProperty("server_or_client").equals("server")) {
                NetCheckers.getInstance().setServer(true);
            } else {
                NetCheckers.getInstance().setServer(false);
            }
            NetCheckers.getInstance().setPort(Integer.parseInt(prop.getProperty("port")));
            NetCheckers.getInstance().setIP(prop.getProperty("serverIP"));
            colorBoardBlack = new Color(Integer.parseInt(prop.getProperty("color_board_black")));
            colorBoardWhite = new Color(Integer.parseInt(prop.getProperty("color_board_white")));
            colorCheckersBlack = new Color(Integer.parseInt(prop.getProperty("color_checkers_black")));
            colorChekersWhite = new Color(Integer.parseInt(prop.getProperty("color_chekers_white")));
            jPanelBoardBlack.setBackground(colorBoardBlack);
            jPanelBoardWhite.setBackground(colorBoardWhite);
            jPanelCheckersBlack.setBackground(colorCheckersBlack);
            jPanelCheckersWhite.setBackground(colorChekersWhite);
            NetCheckers.getInstance().setBackgroundColor(colorBoardWhite);
            propin.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void saveConfig() {
        try {
            Properties prop = new Properties();
            OutputStream propOut = new FileOutputStream(new File("settings"));
            prop.setProperty("server_or_client", NetCheckers.getInstance().isServer() ? "server" : "client");
            prop.setProperty("port", Integer.toString(NetCheckers.getInstance().getPort()));
            prop.setProperty("serverIP", NetCheckers.getInstance().getIP());
            prop.setProperty("color_board_black", Integer.toString(colorBoardBlack.getRGB()));
            prop.setProperty("color_board_white", Integer.toString(colorBoardWhite.getRGB()));
            prop.setProperty("color_checkers_black", Integer.toString(colorCheckersBlack.getRGB()));
            prop.setProperty("color_chekers_white", Integer.toString(colorChekersWhite.getRGB()));
            prop.store(propOut, "NetCheckers properties");
            propOut.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
