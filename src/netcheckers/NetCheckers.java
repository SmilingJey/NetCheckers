package netcheckers;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NetCheckers.java
 *
 * Created on 18.04.2009, 8:33:17
 */
/**
 *
 * @author APTEM
 */
public class NetCheckers extends javax.swing.JFrame {

    public static void main(String[] args) {
        NetCheckers.getInstance();
        Configframe.getInstance().loadConfig();         
        NetCheckers.getInstance().setVisible(true);
    }

    private static NetCheckers instance;

    private ActionListener taskPerformerTimerWhite;
    private ActionListener taskPerformerTimerBlack;
    public Timer timerWhite;
    public Timer timerBlack;
    public int timerWhiteTime;
    public int timerBlackTime;
    public boolean timerWhitePause = true;
    public boolean timerBlackPause = true;
    
    
    public boolean connect = false;
    public BoardPanel pole_panel;
    public ServerListiner sl;
    public ServerConnect sc;

    public String game_type = "";
    public DefaultListModel listModel = new DefaultListModel();
    
    
    public static NetCheckers getInstance() {
        if (instance == null) {
            instance = new NetCheckers();
        }
        return instance;
    }

    private NetCheckers() {
        initComponents();
        
        this.setBackground(new Color(204, 153, 0));
        URL url = this.getClass().getResource("icon.png");
        ImageIcon image = new ImageIcon(url);
        setIconImage(image.getImage());
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
        pole_panel = getPole_panel();
        pole_panel.setSize(jPanelBoard.getWidth(), jPanelBoard.getHeight());
        jPanelBoard.add(pole_panel, BorderLayout.CENTER);
        pole_panel.resizePanel();
        pole_panel.repaint();
        setBackgroundColor(Configframe.getInstance().getColorBoardWhite());
        jListMove.setModel(listModel);
        
        taskPerformerTimerWhite = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!timerWhitePause) {
                    timerWhiteTime++;
                    jLabelWhiteTime.setText("WHITE: " + String.format("%01d:%02d:%02d", 
                            (timerWhiteTime / (60 * 60)) % 24,(timerWhiteTime / (60)) % 60, (timerWhiteTime) % 60));
               
                }
            }
        };
        timerWhite = new Timer(1000, taskPerformerTimerWhite);
        timerWhite.setRepeats(true);
        timerWhite.start();
        
        taskPerformerTimerBlack = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!timerBlackPause) {
                    timerBlackTime++;
                    jLabelBlackTime.setText("BLACK: " + String.format("%01d:%02d:%02d", 
                            (timerWhiteTime / (60 * 60)) % 24,(timerWhiteTime / (60)) % 60, (timerWhiteTime) % 60));
               
                }
            }
        };
        timerBlack = new Timer(1000, taskPerformerTimerBlack);
        timerBlack.setRepeats(true);
        timerBlack.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelContent = new javax.swing.JPanel();
        jPanelBoard = new javax.swing.JPanel();
        jPanelLog = new javax.swing.JPanel();
        jButtonSendMessage = new javax.swing.JButton();
        jTextFieldMassage = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanelMenu = new javax.swing.JPanel();
        jCheckBoxRotateBoard = new javax.swing.JCheckBox();
        jButtonColorsSettings = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListMove = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabelWhiteTime = new javax.swing.JLabel();
        jLabelBlackTime = new javax.swing.JLabel();
        jPanelGameSettings = new javax.swing.JPanel();
        jButtonNewGame = new javax.swing.JButton();
        jComboBoxSideSelect = new javax.swing.JComboBox();
        jPanelNetSettings = new javax.swing.JPanel();
        jRadioButtonServer = new javax.swing.JRadioButton();
        jRadioButtonClient = new javax.swing.JRadioButton();
        jTextFieldIP = new javax.swing.JTextField();
        jTextFieldPort = new javax.swing.JTextField();
        jLabelIPLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonConnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NetCheckers");
        setBackground(new java.awt.Color(204, 153, 0));
        setMinimumSize(new java.awt.Dimension(545, 495));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelContent.setBackground(new java.awt.Color(204, 153, 0));

        jPanelBoard.setBackground(new java.awt.Color(102, 102, 102));
        jPanelBoard.setLayout(new java.awt.BorderLayout());

        jPanelLog.setBackground(new java.awt.Color(204, 153, 0));
        jPanelLog.setLayout(null);

        jButtonSendMessage.setText("Send");
        jButtonSendMessage.setEnabled(false);
        jButtonSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendMessageActionPerformed(evt);
            }
        });
        jPanelLog.add(jButtonSendMessage);
        jButtonSendMessage.setBounds(540, 70, 70, 20);

        jTextFieldMassage.setEnabled(false);
        jPanelLog.add(jTextFieldMassage);
        jTextFieldMassage.setBounds(70, 70, 460, 20);

        jTextAreaLog.setEditable(false);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(4);
        jScrollPane2.setViewportView(jTextAreaLog);

        jPanelLog.add(jScrollPane2);
        jScrollPane2.setBounds(70, 6, 540, 60);

        jLabel6.setText("Message:");
        jPanelLog.add(jLabel6);
        jLabel6.setBounds(10, 70, 60, 20);

        jLabel2.setText("Log:");
        jPanelLog.add(jLabel2);
        jLabel2.setBounds(10, 10, 60, 14);

        jPanelMenu.setBackground(new java.awt.Color(204, 153, 0));
        jPanelMenu.setPreferredSize(new java.awt.Dimension(100, 274));
        jPanelMenu.setLayout(null);

        jCheckBoxRotateBoard.setText("rotate");
        jCheckBoxRotateBoard.setContentAreaFilled(false);
        jCheckBoxRotateBoard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxRotateBoardItemStateChanged(evt);
            }
        });
        jPanelMenu.add(jCheckBoxRotateBoard);
        jCheckBoxRotateBoard.setBounds(0, 380, 80, 23);

        jButtonColorsSettings.setText("colors");
        jButtonColorsSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorsSettingsActionPerformed(evt);
            }
        });
        jPanelMenu.add(jButtonColorsSettings);
        jButtonColorsSettings.setBounds(90, 380, 90, 23);

        jScrollPane1.setAutoscrolls(true);

        jScrollPane1.setViewportView(jListMove);

        jPanelMenu.add(jScrollPane1);
        jScrollPane1.setBounds(0, 60, 180, 90);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("You play WHITE");
        jPanelMenu.add(jLabel1);
        jLabel1.setBounds(2, 0, 170, 30);

        jLabelWhiteTime.setBackground(new java.awt.Color(204, 153, 0));
        jLabelWhiteTime.setText("WHITE: 0:00");
        jLabelWhiteTime.setOpaque(true);
        jPanelMenu.add(jLabelWhiteTime);
        jLabelWhiteTime.setBounds(2, 30, 87, 20);
        jLabelWhiteTime.getAccessibleContext().setAccessibleDescription("");

        jLabelBlackTime.setBackground(new java.awt.Color(204, 153, 0));
        jLabelBlackTime.setText("BLACK: 0:00");
        jLabelBlackTime.setOpaque(true);
        jPanelMenu.add(jLabelBlackTime);
        jLabelBlackTime.setBounds(90, 30, 90, 20);

        jPanelGameSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelGameSettings.setOpaque(false);
        jPanelGameSettings.setLayout(null);

        jButtonNewGame.setText("New game");
        jButtonNewGame.setEnabled(false);
        jButtonNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewGameActionPerformed(evt);
            }
        });
        jPanelGameSettings.add(jButtonNewGame);
        jButtonNewGame.setBounds(10, 40, 160, 22);

        jComboBoxSideSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Server - WHITE", "Server - BLACK" }));
        jComboBoxSideSelect.setEnabled(false);
        jPanelGameSettings.add(jComboBoxSideSelect);
        jComboBoxSideSelect.setBounds(10, 10, 160, 20);

        jPanelMenu.add(jPanelGameSettings);
        jPanelGameSettings.setBounds(0, 300, 180, 70);

        jPanelNetSettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelNetSettings.setOpaque(false);
        jPanelNetSettings.setLayout(null);

        jRadioButtonServer.setBackground(new java.awt.Color(204, 153, 0));
        buttonGroup1.add(jRadioButtonServer);
        jRadioButtonServer.setSelected(true);
        jRadioButtonServer.setText("Server");
        jRadioButtonServer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButtonServerMouseClicked(evt);
            }
        });
        jPanelNetSettings.add(jRadioButtonServer);
        jRadioButtonServer.setBounds(10, 10, 80, 23);

        jRadioButtonClient.setBackground(new java.awt.Color(204, 153, 0));
        buttonGroup1.add(jRadioButtonClient);
        jRadioButtonClient.setText("Client");
        jRadioButtonClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButtonClientMouseClicked(evt);
            }
        });
        jPanelNetSettings.add(jRadioButtonClient);
        jRadioButtonClient.setBounds(90, 10, 80, 23);

        jTextFieldIP.setText("127.0.0.1");
        jTextFieldIP.setEnabled(false);
        jPanelNetSettings.add(jTextFieldIP);
        jTextFieldIP.setBounds(70, 40, 100, 20);

        jTextFieldPort.setText("4567");
        jTextFieldPort.setToolTipText("");
        jPanelNetSettings.add(jTextFieldPort);
        jTextFieldPort.setBounds(70, 70, 100, 20);

        jLabelIPLabel.setText("Server IP:");
        jLabelIPLabel.setEnabled(false);
        jPanelNetSettings.add(jLabelIPLabel);
        jLabelIPLabel.setBounds(10, 40, 60, 20);

        jLabel5.setText("Port:");
        jPanelNetSettings.add(jLabel5);
        jLabel5.setBounds(10, 70, 60, 20);

        jButtonConnect.setText("Start server");
        jButtonConnect.setToolTipText("");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });
        jPanelNetSettings.add(jButtonConnect);
        jButtonConnect.setBounds(10, 100, 160, 22);

        jPanelMenu.add(jPanelNetSettings);
        jPanelNetSettings.setBounds(0, 160, 180, 130);

        javax.swing.GroupLayout jPanelContentLayout = new javax.swing.GroupLayout(jPanelContent);
        jPanelContent.setLayout(jPanelContentLayout);
        jPanelContentLayout.setHorizontalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContentLayout.createSequentialGroup()
                .addComponent(jPanelBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanelLog, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
        );
        jPanelContentLayout.setVerticalGroup(
            jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelContentLayout.createSequentialGroup()
                .addGroup(jPanelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addComponent(jPanelBoard, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelLog, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxRotateBoardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxRotateBoardItemStateChanged
        pole_panel.rotate = jCheckBoxRotateBoard.isSelected();
        pole_panel.repaint();
    }//GEN-LAST:event_jCheckBoxRotateBoardItemStateChanged

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        if (jButtonConnect.getText().equals("Start server") || jButtonConnect.getText().equals("Connect to server")) {
            new_game_conn();
        } else {
            game_disconnect();
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    public void new_game_conn() {
        if (isServer()) {
            sl = new ServerListiner();
            sl.start();
            addtolog(" SYSTEM>>>Wait client connected ... ");
        } else {
            String ip = getIP();
            int port = getPort();
            addtolog(" SYSTEM>>>Connect to " + ip);
            try {
                Socket socket = new Socket(ip, port);
                sc = new ServerConnect(socket);
                connect = true;
                set_enable_connect(true);
                jButtonConnect.setText("Disconnect");
            } catch (UnknownHostException e) {
                addtolog(" SYSTEM>>>Unknow host");
                setConnectButtonText(jRadioButtonServer.isSelected());
                set_enable_connect(false);
            } catch (IOException e) {
                addtolog(" SYSTEM>>>IO Connect error");
                setConnectButtonText(jRadioButtonServer.isSelected());
                set_enable_connect(false);
            }
        }
    }

    public void game_disconnect() {
        set_enable_connect(false);
        set_enable_server(false);
        timerWhitePause = true;
        timerBlackPause = true;
        jLabelBlackTime.setBackground(Configframe.getInstance().getColorBoardWhite());
        jLabelWhiteTime.setBackground(Configframe.getInstance().getColorBoardWhite());
        jButtonConnect.setText("Connect");
        connect = false;
        try {
            pole_panel.game_start = false;
            sc.client.shutdownInput();
            sc.client.shutdownOutput();
            sc.writer.out.close();
            sc.writer.out.close();
            sc.client.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void jButtonColorsSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorsSettingsActionPerformed
        Configframe.getInstance().setVisible(true);
    }//GEN-LAST:event_jButtonColorsSettingsActionPerformed

    private void jButtonSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendMessageActionPerformed
        if (!jTextFieldMassage.getText().isEmpty()) {
            sc.send_mess("mess " + jTextFieldMassage.getText());
            addtolog(" I SAY>>> " + jTextFieldMassage.getText());
        }

    }//GEN-LAST:event_jButtonSendMessageActionPerformed

    private void jButtonNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewGameActionPerformed
        new_game_start();
    }//GEN-LAST:event_jButtonNewGameActionPerformed

    private void jRadioButtonServerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButtonServerMouseClicked
        jLabelIPLabel.setEnabled(!jRadioButtonServer.isSelected());
        jTextFieldIP.setEnabled(!jRadioButtonServer.isSelected());
        if (jRadioButtonServer.isSelected()) jButtonConnect.setText("Start server");
        else jButtonConnect.setText("Connect to server");
    }//GEN-LAST:event_jRadioButtonServerMouseClicked

    private void jRadioButtonClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButtonClientMouseClicked
        jLabelIPLabel.setEnabled(jRadioButtonClient.isSelected());
        jTextFieldIP.setEnabled(jRadioButtonClient.isSelected());
        if (!jRadioButtonClient.isSelected()) jButtonConnect.setText("Start server");
        else jButtonConnect.setText("Connect to server");
    }//GEN-LAST:event_jRadioButtonClientMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Configframe.getInstance().saveConfig();
    }//GEN-LAST:event_formWindowClosing

    public void new_game_start() {
        CheckersBoard.getInstance().initBoard();
        if (jComboBoxSideSelect.getSelectedItem().toString().equals("Server - BLACK")) {
            jCheckBoxRotateBoard.setSelected(true);
            CheckersBoard.getInstance().myColor = CheckersBoard.BLACK;
            sc.send_mess("newgame WHITE");
            jLabel1.setText("You play BLACK");
            CheckersBoard.getInstance().nowMove = CheckersBoard.WHITE;
        } else {
            jCheckBoxRotateBoard.setSelected(false);
            CheckersBoard.getInstance().myColor = CheckersBoard.WHITE;
            sc.send_mess("newgame BLACK");
            jLabel1.setText("You play WHITE");
            CheckersBoard.getInstance().nowMove = CheckersBoard.WHITE;
        }
        jLabelWhiteTime.setText(" WHITE: 0:00:00");
        jLabelBlackTime.setText(" BLACK: 0:00:00");
        timerWhitePause = true;
        timerBlackPause = true;
        timerBlackTime = 0;
        timerWhiteTime = 0;
        setWhiteMove(CheckersBoard.getInstance().nowMove == CheckersBoard.WHITE);
        listModel.clear();
        addtolog(" SYSTEM>>>New game started, " + jLabel1.getText());
        pole_panel.newline = true;
        pole_panel.game_start = true;
        pole_panel.repaint();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonColorsSettings;
    public javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonNewGame;
    private javax.swing.JButton jButtonSendMessage;
    public javax.swing.JCheckBox jCheckBoxRotateBoard;
    private javax.swing.JComboBox jComboBoxSideSelect;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabelBlackTime;
    private javax.swing.JLabel jLabelIPLabel;
    public javax.swing.JLabel jLabelWhiteTime;
    private javax.swing.JList jListMove;
    private javax.swing.JPanel jPanelBoard;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JPanel jPanelGameSettings;
    private javax.swing.JPanel jPanelLog;
    private javax.swing.JPanel jPanelMenu;
    private javax.swing.JPanel jPanelNetSettings;
    private javax.swing.JRadioButton jRadioButtonClient;
    private javax.swing.JRadioButton jRadioButtonServer;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextField jTextFieldIP;
    private javax.swing.JTextField jTextFieldMassage;
    private javax.swing.JTextField jTextFieldPort;
    // End of variables declaration//GEN-END:variables

    public void addtolog(String s) {
        jTextAreaLog.setText(jTextAreaLog.getText() + s + '\n');
        jTextFieldMassage.setText("");
        jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getMaximum());
    }

    public void set_enable_connect(boolean b) {
        jButtonSendMessage.setEnabled(b);
        jTextFieldMassage.setEnabled(b);
    }

    public void set_enable_server(boolean b) {
        jComboBoxSideSelect.setEnabled(b);
        //jButton3.setEnabled(b);
        jButtonNewGame.setEnabled(b);
        jButtonSendMessage.setEnabled(b);
        jTextFieldMassage.setEnabled(b);
    }

    private BoardPanel getPole_panel() {
        if (pole_panel == null) {
            pole_panel = new BoardPanel();
            pole_panel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent e) {
                    pole_panel.movestop();
                }

                public void mousePressed(java.awt.event.MouseEvent e) {
                    pole_panel.x_move = e.getX();
                    pole_panel.y_move = e.getY();
                    pole_panel.movestart();
                }
            });
            pole_panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseDragged(java.awt.event.MouseEvent e) {
                    pole_panel.x_move = e.getX();
                    pole_panel.y_move = e.getY();
                    pole_panel.repaint();
                }
            });
            pole_panel.addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentResized(java.awt.event.ComponentEvent e) {
                    pole_panel.resizePanel();
                    pole_panel.repaint();
                }
            });
        }
        return pole_panel;
    }

    public void set_time(int h, int m, int s, String how) {
        String mm = (Integer.toString(m).length() == 1) ? "0" + Integer.toString(m) : Integer.toString(m);
        String ss = (Integer.toString(s).length() == 1) ? "0" + Integer.toString(s) : Integer.toString(s);
        String time = "" + h + ":" + mm + ":" + ss;
        if (how.equals("WHITE")) {
            jLabelWhiteTime.setText(" WHITE: " + time);
        } else {
            jLabelBlackTime.setText(" BLACK: " + time);
        }
    }

    public void setBackgroundColor(Color c) {
        jPanelContent.setBackground(c);
        jPanelMenu.setBackground(c);
        jPanelLog.setBackground(c);
        jRadioButtonServer.setBackground(c);
        jRadioButtonClient.setBackground(c);
        jLabelWhiteTime.setBackground(c);
        jLabelBlackTime.setBackground(c);
    }

    public void setWhiteMove(boolean b) {
        if (b) {
            jLabelBlackTime.setBackground(Configframe.getInstance().getColorBoardWhite());
            jLabelWhiteTime.setBackground(new Color(255, 0, 0));
            timerWhitePause = false;
            timerBlackPause = true;
        } else {
            jLabelBlackTime.setBackground(new Color(255, 0, 0));
            jLabelWhiteTime.setBackground(Configframe.getInstance().getColorBoardWhite());
            timerWhitePause = true;
            timerBlackPause = false;
        }
        int isGameEnd = CheckersBoard.getInstance().isGameEnd();
        if (isGameEnd == CheckersBoard.WHITE) {
            addtolog("WHITE WIN!!!");
            pole_panel.game_start = false;
        }else if (isGameEnd == CheckersBoard.BLACK) {
            addtolog("BLACK WIN!!!");
            pole_panel.game_start = false;
        }
    }

    public int getCellNumberByChar(char c) {
        switch (c) {
            case 'a':
                return 0;
            case 'b':
                return 1;
            case 'c':
                return 2;
            case 'd':
                return 3;
            case 'e':
                return 4;
            case 'f':
                return 5;
            case 'g':
                return 6;
            case 'h':
                return 7;
        }
        System.err.println("error: convert char to cell number");
        return -1;
    }

    public String getIP() {
        return jTextFieldIP.getText();
    }

    public int getPort() {
        return Integer.parseInt(jTextFieldPort.getText());
    }

    public boolean isServer() {
        return jRadioButtonServer.isSelected();
    }

    public void setServer(boolean server) {
        if (server) {
            jRadioButtonServer.setSelected(true);
        } else {
            jRadioButtonClient.setSelected(true);
        }
        setConnectButtonText(server);
        jLabelIPLabel.setEnabled(!server);
        jTextFieldIP.setEnabled(!server);
    }
    
    public void setConnectButtonText(boolean server){
        if (server) {
            jButtonConnect.setText("Start server"); 
        } else {
            jButtonConnect.setText("Connect to server");
        }
    }

    public void setIP(String ip) {
        jTextFieldIP.setText(ip);
    }

    public void setPort(int port) {
        jTextFieldPort.setText(Integer.toString(port));
    }

}
